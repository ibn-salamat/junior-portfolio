{"version":3,"sources":["components/TodoInput.js","components/Todo.js","App.js","redux/rootReducer.js","index.js"],"names":["TodoInput","newTodo","title","this","props","inputValue","className","type","value","onChange","event","onChangeInput","target","onClick","trim","addTodo","sortTodo","sortValue","Component","Todo","id","todo","isDone","updateTodo","delTodo","App","onSortTodos","onAdd","e","sortedTodos","map","item","onDel","key","onChangeStateTodo","connect","state","Object","assign","dispatch","payload","initialState","JSON","parse","localStorage","getItem","todos","store","createStore","action","newState","Date","getTime","push","filter","forEach","subscribe","name","data","getState","setItem","stringify","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e20ec01.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nclass TodoInput extends Component {\r\n  render(){\r\n    const newTodo = {\r\n      title: this.props.inputValue\r\n    }\r\n\r\n    return (\r\n      <div className='add-container'>\r\n        <input type='text' value={this.props.inputValue} onChange={ (event) => this.props.onChangeInput(event.target.value)} />\r\n        <button \r\n          className='btn-success' \r\n          onClick={ () => {\r\n            if(this.props.inputValue.trim()){\r\n              this.props.addTodo(newTodo) \r\n              this.props.sortTodo(this.props.sortValue)\r\n            }\r\n          }}\r\n        >Add todo</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoInput\r\n","import React,{Component} from 'react';\r\n\r\nclass Todo extends Component {\r\n  render(){\r\n    let id = this.props.todo.id\r\n    return (\r\n      <div className={`todo ${this.props.todo.isDone ? 'todo-done' : ''}`} >\r\n        <p>{this.props.todo.title}</p>\r\n        <button \r\n            className='btn-success' \r\n            onClick={() => {\r\n              this.props.updateTodo(id)\r\n              this.props.sortTodo(this.props.sortValue)\r\n            }}>Update state\r\n          </button>\r\n        <button className='btn-danger' onClick={() => {this.props.delTodo(id)}}>Delete</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Todo\r\n","import React,{Component} from 'react';\r\nimport './App.css'\r\nimport {connect} from 'react-redux'\r\nimport TodoInput from './components/TodoInput'\r\nimport Todo from './components/Todo'\r\n\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return (\r\n      <div>\r\n        <TodoInput  \r\n          sortTodo={this.props.onSortTodos}\r\n          addTodo={this.props.onAdd} \r\n          inputValue={this.props.inputValue} \r\n          onChangeInput={this.props.onChangeInput}\r\n          sortValue={this.props.sortValue}\r\n        />\r\n\r\n      <select \r\n          className='sort-input' \r\n          value={this.props.sortValue} \r\n          onChange={(e) => { this.props.onSortTodos(e.target.value)} }\r\n        >\r\n          <option>All</option>\r\n          <option>Finished</option>\r\n          <option>Not finished</option>\r\n        </select>\r\n\r\n        <div className='todos'>\r\n        {\r\n        this.props.sortedTodos.map(item => {\r\n          return <Todo \r\n                    sortTodo={this.props.onSortTodos}\r\n                    sortValue={this.props.sortValue}\r\n                    delTodo={this.props.onDel} \r\n                    todo={item} key={item.id} \r\n                    updateTodo={this.props.onChangeStateTodo}\r\n                  />\r\n        })\r\n        }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  const obj = Object.assign({},state)\r\n  return obj\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n return {\r\n   onAdd: (todo) => dispatch({type: 'ADD_TODO', payload: todo}),\r\n   onChangeInput: (value) => dispatch({type: 'CHANGE_INPUT_VALUE', payload: value}),\r\n   onDel: (id) => dispatch({type: 'DEL_TODO', payload: id}),\r\n   onChangeStateTodo: (id) => dispatch({type: 'UPDATE_STATE_TODO', payload: id}),\r\n   onSortTodos: (value) => dispatch({type: 'SORT_TODOS', payload: value})\r\n }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App)\r\n","let initialState =  JSON.parse(localStorage.getItem('store')) || {\r\n  sortValue: 'All',\r\n  inputValue: '',\r\n  todos: [],\r\n  sortedTodos: []\r\n}\r\n\r\nexport default function rootReducer (state = initialState, action){\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      let newState = {\r\n        ...state,\r\n        inputValue: ''\r\n      }\r\n      \r\n      const newTodo = {\r\n        id: new Date().getTime(),\r\n        title: action.payload.title,\r\n        isDone: false\r\n      }\r\n      newState.todos.push(newTodo)\r\n      return newState\r\n    case 'DEL_TODO':\r\n      return Object.assign({}, state, {\r\n        todos: state.todos.filter(todo => todo.id !== action.payload),\r\n        sortedTodos: state.todos.filter(todo => todo.id !== action.payload)\r\n      })\r\n    case 'UPDATE_STATE_TODO':\r\n      let todos = [...state.todos]\r\n      todos.forEach(todo => {\r\n        if(todo.id === action.payload){\r\n          todo.isDone = !todo.isDone\r\n        }\r\n      })\r\n      let newState2 =  Object.assign({},state, {\r\n        todos\r\n      })\r\n      return newState2\r\n    case 'CHANGE_INPUT_VALUE':\r\n      return Object.assign({}, state, {\r\n        inputValue: action.payload\r\n      })\r\n    case 'SORT_TODOS':\r\n      return Object.assign({}, state, {\r\n        sortValue: action.payload,\r\n        sortedTodos: state.todos.filter(todo => {\r\n          if(action.payload === 'Not finished') return !todo.isDone\r\n          else if (action.payload === 'Finished') return todo.isDone\r\n          else return todo\r\n        })\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n// REDUX\r\nimport {createStore} from 'redux'\r\nimport rootReducer from './redux/rootReducer'\r\nimport {Provider} from 'react-redux'\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nstore.subscribe(() => {\r\n  saveToLocalStorage('store',store.getState())\r\n})\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n)\r\n\r\n\r\nfunction saveToLocalStorage(name,data) {\r\n  localStorage.setItem(name,JSON.stringify(data))\r\n}\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}